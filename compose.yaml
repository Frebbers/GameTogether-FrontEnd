x-common-env: &common-env
  ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
  ConnectionStrings__DefaultConnection: ${CONNECTION_STRING}
  JwtSettings__SecretKey: ${JWT_SECRET}
  JwtSettings__Issuer: "GameTogether"
  JwtSettings__Audience: "GameTogetherApp"
  EmailSettings__VerificationUrl: ${EMAIL_VERIFICATION_URL}
  EmailSettings__SmtpServer: ${SMTP_SERVER}
  EmailSettings__Port: ${SMTP_PORT}
  EmailSettings__SenderEmail: ${SENDER_EMAIL}
  EmailSettings__SenderPassword: ${SENDER_PASSWORD}
  ASPNETCORE_URLS: ${ASPNETCORE_URLS}
  #ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnet-dev.pfx"
  ASPNETCORE_Kestrel__Certificates__Default__Password: ${DB_PASSWORD:-rekt123}
  FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
  JEST_JUNIT_OUTPUT_DIR: "test-results"
  JEST_JUNIT_OUTPUT_NAME: "junit.xml"

services:
  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE}
        ENVIRONMENT: ${ENVIRONMENT:-Development}
    depends_on:
      - api
    environment:
      - NODE_ENV=production
      - API_URL=http://api:7191
      - VITE_PORT=5173
      - ENVIRONMENT=${ENVIRONMENT:-Development}
    ports: ["5173:5173"]
    networks:
      - app-network

  # MySQL Database
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports: ["3306:3306"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 2
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

# Backend (ASP.NET Core)
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports: ["5000:8080", "7191:7191"]
    depends_on:
      mysql:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment: *common-env
    volumes:
      - /etc/nginx/ssl/:/https:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7191/healthz"]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - app-network

  # Migration service to run db migrations
  migrate:
    build:
      context: ./backend
      args:
        - ENVIRONMENT=${ENVIRONMENT}
      target: build
    depends_on:
      mysql:
        condition: service_healthy
    environment: *common-env
    working_dir: /src
    command: >
      sh -c "dotnet ef database update --project GameTogetherAPI/GameTogetherAPI.csproj --startup-project GameTogetherAPI/GameTogetherAPI.csproj"
    networks:
      - app-network
      
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - /etc/nginx/ssl/:/https:ro
    depends_on:
      - frontend
      - api
    networks:
      - app-network

  test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: build
    volumes:
      - ./frontend/test-results:/app/test-results
    depends_on:
      mysql:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      api:
        condition: service_healthy
    environment: *common-env
    working_dir: /app
    command: npm run testci

    networks:
      - app-network

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge
