name: Test Project
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - test-backend

jobs:
  run-tests:
    name: Test Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /tmp/docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/compose.yaml', '**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Pull and cache Docker images
        run: |
          docker pull mysql:latest
          docker pull mcr.microsoft.com/dotnet/sdk:8.0
          docker pull mcr.microsoft.com/dotnet/aspnet:8.0
          docker pull node:18-alpine
          mkdir -p /tmp/docker-cache
          docker save mysql:latest mcr.microsoft.com/dotnet/sdk:8.0 mcr.microsoft.com/dotnet/aspnet:8.0 node:18-alpine -o /tmp/docker-cache/images.tar

      - name: Load cached Docker images
        run: |
          if [ -f /tmp/docker-cache/images.tar ]; then
            docker load -i /tmp/docker-cache/images.tar
          fi

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: 'latest'

      - name: Run integration tests
        id: frontend-test
        continue-on-error: true
        run: |
          /usr/bin/docker compose up test --exit-code-from test
          echo "status=$?" >> $GITHUB_OUTPUT

      - name: Run backend unit tests
        id: backend-test
        continue-on-error: true
        run: |
          /usr/bin/docker compose up unittest --exit-code-from unittest
          echo "status=$?" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            frontend/test-results/
            backend/test-results/

      - name: Fail workflow if any tests failed
        run: |
          frontend_status=${{ steps.frontend-test.outputs.status }}
          backend_status=${{ steps.backend-test.outputs.status }}
          if [ "$frontend_status" != "0" ] || [ "$backend_status" != "0" ]; then
            echo "Frontend tests exit code: $frontend_status"
            echo "Backend tests exit code: $backend_status"
            exit 1
          fi